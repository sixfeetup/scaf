image: python:3.10

definitions:
  services:
    docker:
      memory: 3072
    postgres:
      image: postgres:14
      environment:
        POSTGRES_DB: {{cookiecutter.project_slug}}
        POSTGRES_USER: {{cookiecutter.project_slug}}
        POSTGRES_PASSWORD: CHANGEME
    redis:
      image: redis:stable

  steps:
    - step: &backend-tests
        name: Backend Tests
        caches:
          - pip
        script:
          - curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && echo "deb http://apt.postgresql.org/pub/repos/apt buster-pgdg main" > /etc/apt/sources.list.d/pgdg.list
          - apt-get update
          - apt-get install --no-install-recommends -y build-essential ca-certificates curl gettext gnupg libpq-dev libffi-dev postgresql-client-12 postgresql-client-common
          - export DATABASE_URL=postgres://{{cookiecutter.project_slug}}:CHANGEME@127.0.0.1:5432/{{cookiecutter.project_slug}}
          {% if cookiecutter.use_celery == 'y' %}
          - export CELERY_BROKER_URL=redis://127.0.0.1:6379/0
          {% endif %}
          - cd backend
          - pip --disable-pip-version-check install --no-deps -r requirements/production.txt -r requirements/base.txt
          - pip --disable-pip-version-check install --no-deps -r requirements/tests.txt
          - pytest --cov=./ --cov-report html --ds=config.settings.test
        services:
          - redis
          - postgres

    - step: &backend-linting-checks
        name: Backend linting and formatting checks
        caches:
          - pip
        script:
          - apt-get update && apt-get install --no-install-recommends -y git openssh-client
          - pip install pre-commit
          - pre-commit run -a

    - step: &frontend-linting-checks
        name: Frontend Lint & Typecheck & Test
        image: node:16-bullseye
        caches:
          - node
        script:
          - cd ./front-end
          - npm install --legacy-peer-deps
          - npm run lint-src
          - npm run typecheck
          - npm run test

    - step: &build-and-push-images
        name: Build and Push Images
        max-time: 10
        services:
          - docker
        caches:
          - pip
          - docker
        script:
          # build images and push to ecr
          - NS="{{cookiecutter.project_slug}}-sandbox"
          - apt-get update && apt-get install --no-install-recommends -y curl sudo git
          - pip3 install awscli
          - aws configure set aws_access_key_id "${AWS_KEY}"
          - aws configure set aws_secret_access_key "${AWS_SECRET}"
          - eval $(aws ecr get-login --no-include-email --region ${AWS_REGION} | sed 's;https://;;g')
          # install kubectl
          - curl -Lo /tmp/kubectl "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          - curl -Lo /tmp/kubectl.sha256 "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          - echo "$(cat /tmp/kubectl.sha256) /tmp/kubectl" | sha256sum --check
          - install -o root -g root -m 0755 /tmp/kubectl /usr/local/bin/kubectl
          # get kubeconfig from repository variables
          - echo $KUBE_CONFIG_SANDBOX | base64 -d > kubeconfig
          - export KUBECONFIG="kubeconfig"
          - kubectl config use-context best-ec2-dev-cluster
          # update regcred
          - echo $(aws ecr get-login-password)
          - kubectl delete secret regcred --namespace=$NS --ignore-not-found
          - kubectl create secret docker-registry regcred --docker-server=385556909832.dkr.ecr.us-east-1.amazonaws.com --docker-username=AWS --docker-password=$(aws ecr get-login-password --region ${AWS_REGION}) --namespace=$NS
          # create secrets for CloudNativePG
          - kubectl delete secret aws-creds --namespace=$NS --ignore-not-found
          - kubectl delete secret app-secret --namespace=$NS --ignore-not-found
          - kubectl delete secret superuser-secret --namespace=$NS --ignore-not-found
          - kubectl create secret generic aws-creds --from-literal=ACCESS_KEY_ID=${AWS_KEY} --from-literal=ACCESS_SECRET_KEY=${AWS_SECRET} --namespace=$NS
          - kubectl create secret generic app-secret --from-literal=password=$POSTGRES_PASSWORD --from-literal=username=sfu_best --namespace=$NS
          - kubectl create secret generic superuser-secret --from-literal=password=$POSTGRES_PASSWORD --from-literal=username=postgres --namespace=$NS
          - export DOCKER_BUILDKIT=1
          - echo "NEXT_PUBLIC_API_BASE_URL=https://{{cookiecutter.project_slug}}.sandbox.api.sixfeetup.com/" > ./frontend/.env
          - FRONTEND_IMAGE="${ECR_REPO_FRONTEND}"
          - docker build -t $FRONTEND_IMAGE:$BITBUCKET_COMMIT  -t $FRONTEND_IMAGE:latest frontend
          - docker push $FRONTEND_IMAGE -a
          - BACKEND_IMAGE="${ECR_REPO_BACKEND}"
          - docker build -t $BACKEND_IMAGE:$BITBUCKET_COMMIT  -t $BACKEND_IMAGE:latest backend
          - docker push $BACKEND_IMAGE -a
          # install kustomize
          - URL=https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.0.3/kustomize_v5.0.3_linux_amd64.tar.gz
          - curl -L $URL | tar zx
          - sudo chmod +x ./kustomize
          - sudo mv ./kustomize /usr/local/bin/
          # edit images
          - cd deploy/sandbox
          - FRONTEND_IMAGE="${ECR_REPO_FRONTEND}"
          - kustomize edit set image best-frontend=$FRONTEND_IMAGE:$BITBUCKET_COMMIT
          - BACKEND_IMAGE="${ECR_REPO_BACKEND}"
          - kustomize edit set image best-backend=$BACKEND_IMAGE:$BITBUCKET_COMMIT
          # commit & push
          - git add kustomization.yaml
          - git commit -am "[skip ci] Tag Images"
          - git push

    - step: &deploy-to-prod
        # rebuild frontend image to bake NEXT_PUBLIC_API_BASE_URL into static
        # bundle.
        # NextJS Browser environment variables can only be added to the bundle
        # served to the client at BUILD time. See https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#bundling-environment-variables-for-the-browser
        name: Build and tag images for release to prod
        max-time: 10
        services:
          - docker
        caches:
          - pip
          - docker
        script:
          - apt-get update && apt-get install --no-install-recommends -y curl sudo git
          - FRONTEND_IMAGE="${ECR_REPO_FRONTEND}"
          - BACKEND_IMAGE="${ECR_REPO_BACKEND}"
          - NS="best"
          - pip3 install awscli
          - aws configure set aws_access_key_id "${AWS_KEY}"
          - aws configure set aws_secret_access_key "${AWS_SECRET}"
          - eval $(aws ecr get-login --no-include-email --region ${AWS_REGION} | sed 's;https://;;g')
          # install kubectl
          - curl -Lo /tmp/kubectl "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          - curl -Lo /tmp/kubectl.sha256 "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          - echo "$(cat /tmp/kubectl.sha256) /tmp/kubectl" | sha256sum --check
          - install -o root -g root -m 0755 /tmp/kubectl /usr/local/bin/kubectl
          # get kubeconfig from repository variables
          - echo $KUBE_CONFIG | base64 -d > kubeconfig
          - export KUBECONFIG="kubeconfig"
          - kubectl config use-context best-ec2-cluster
          # update regcred
          - echo $(aws ecr get-login-password)
          - kubectl delete secret regcred --namespace=$NS --ignore-not-found
          - kubectl create secret docker-registry regcred --docker-server=385556909832.dkr.ecr.us-east-1.amazonaws.com --docker-username=AWS --docker-password=$(aws ecr get-login-password --region ${AWS_REGION}) --namespace=$NS
          # create secrets for CloudNativePG
          - kubectl delete secret aws-creds --namespace=$NS --ignore-not-found
          - kubectl delete secret app-secret --namespace=$NS --ignore-not-found
          - kubectl delete secret superuser-secret --namespace=$NS --ignore-not-found
          - kubectl create secret generic aws-creds --from-literal=ACCESS_KEY_ID=${AWS_KEY} --from-literal=ACCESS_SECRET_KEY=${AWS_SECRET} --namespace=$NS
          - kubectl create secret generic app-secret --from-literal=password=$POSTGRES_PASSWORD --from-literal=username=sfu_best --namespace=$NS
          - kubectl create secret generic superuser-secret --from-literal=password=$POSTGRES_PASSWORD --from-literal=username=postgres --namespace=$NS
          - export DOCKER_BUILDKIT=1
          - echo "NEXT_PUBLIC_API_BASE_URL=https://best.api.sixfeetup.com/" > ./frontend/.env
          # build frontend image and push to ecr
          - docker build -t $FRONTEND_IMAGE:$BITBUCKET_COMMIT -t $FRONTEND_IMAGE:latest frontend
          - docker push $FRONTEND_IMAGE -a
          # tag the backend image with release tag
          # NOTE: most recent merge to main will be tagged "latest".
          - docker pull $BACKEND_IMAGE:latest
          - docker tag $BACKEND_IMAGE:latest $BACKEND_IMAGE:$BITBUCKET_COMMIT
          - docker push $BACKEND_IMAGE:$BITBUCKET_COMMIT
          # install kustomize
          - URL=https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.0.3/kustomize_v5.0.3_linux_amd64.tar.gz
          - curl -L $URL | tar zx
          - sudo chmod +x ./kustomize
          - sudo mv ./kustomize /usr/local/bin/
          # edit images
          - cd deploy/prod
          - FRONTEND_IMAGE="${ECR_REPO_FRONTEND}"
          - kustomize edit set image best-frontend=$FRONTEND_IMAGE:$BITBUCKET_COMMIT
          - BACKEND_IMAGE="${ECR_REPO_BACKEND}"
          - kustomize edit set image best-backend=$BACKEND_IMAGE:$BITBUCKET_COMMIT
          # commit & push
          - git add kustomization.yaml
          - git commit -am "Tag images [skip ci]"
          - git push

pipelines:
  default:
    - parallel:
      - step: *backend-linting-checks
      - step: *backend-tests
      - step: *frontend-linting-checks

  main:
    - step: *build-and-push-images

  # This can only be triggered manually in Bitbucket UI or with an API call
  custom:
    - step: *deploy-to-prod
