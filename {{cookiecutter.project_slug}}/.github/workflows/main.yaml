name: Main Workflow

on: [ push, pull_request ]

env:
  AWS_REGION: ${{ '{{ vars.AWS_REGION }}' }}
  AWS_ACCOUNT_ID: ${{ '{{ vars.AWS_ACCOUNT_ID }}' }}

jobs:
  check-lint-and-formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Check lint and formatting
        run: make check-lint-and-formatting
{% if cookiecutter.create_nextjs_frontend == 'y' %}
  check-lint-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Frontend Lint & Typecheck & Test
        run: make check-lint-and-test-frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Frontend Unit Tests
        run: CI=true make frontend-test
{% endif %}
  backend-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: {{ cookiecutter.project_slug }}
          POSTGRES_USER: {{ cookiecutter.project_slug }}
          POSTGRES_PASSWORD: TESTPASSWORD
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

{% if cookiecutter.use_celery == 'y' %}
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
{% endif %}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Run backend tests
        run: CI=true make backend-test
        env:
          DATABASE_URL: postgresql://{{ cookiecutter.project_slug }}:TESTPASSWORD@localhost:5432/{{ cookiecutter.project_slug }}
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
{% if cookiecutter.use_celery == 'y' %}          CELERY_BROKER_URL: redis://127.0.0.1:6379/0{% endif %}

  build-and-push-images:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [check-lint-and-formatting, backend-test]

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ '{{secrets.GITHUB_TOKEN}}' }}
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ '{{ env.AWS_ACCOUNT_ID }}' }}:role/{{ cookiecutter.project_slug }}-github-oidc-role
          aws-region: ${{ '{{ env.AWS_REGION }}' }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo ${{ '{{ github.ref }}' }} | sed s,refs/heads/,, | sed s,/,-,g)" >> $GITHUB_ENV
          export TARGET_ENV=$(if [ "$BRANCH_NAME" = "main" ]; then echo "prod"; else echo "sandbox"; fi)
          echo "TARGET_ENV=$TARGET_ENV" >> $GITHUB_ENV
          echo "ECR_REPO_BACKEND=${{ '{{ env.AWS_ACCOUNT_ID }}' }}.dkr.ecr.${{ '{{ env.AWS_REGION }}' }}.amazonaws.com/{{ cookiecutter.project_dash }}-$TARGET_ENV-backend" >> $GITHUB_ENV

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ '{{ env.ECR_REPO_BACKEND }}' }}:${{ '{{ env.SHORT_SHA }}' }},${{ '{{ env.ECR_REPO_BACKEND }}' }}:${{ '{{ env.BRANCH_NAME }}' }}

      - name: Tag Images
        run: |
          cd k8s/$TARGET_ENV
          kustomize edit set image backend=$ECR_REPO_BACKEND:$SHORT_SHA

      - name: Commit & Push to GitHub
        run: |
          git config user.email "$GITHUB_EMAIL"
          git config user.name "GitHub User"
          git add k8s/$TARGET_ENV/kustomization.yaml
          git commit -m "Update $TARGET_ENV image to $SHORT_SHA [skip ci]"
          git push
