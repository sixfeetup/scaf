---
version: '3'
env:
  KUBECONFIG: ./{{ '{{.ENV}}' }}/kubeconfig
  SSH_KEY: ./{{ '{{.ENV}}' }}/id_ed25519
  TFDIR: ../terraform/{{ '{{.ENV}}' }}

tasks:
  bootstrap:
    desc: |
      Run all tasks required to bootstrap k3s and Kubernetes cluster.
    requires:
      vars: [ENV]
    cmds:
      - task: save-node-ips
      - task: setup-ssh-key
      - task: install-k3s
      - task: fetch-kubeconfig
      - task: store-kubeconfig
      - task: enable-ecr-credential-helper

  save-node-ips:
    desc: Save node IPs to a file for later reference
    requires:
      vars: [ENV]
    cmds:
      - tofu -chdir=$TFDIR output control_plane_nodes_public_ips | tr -d '"' > {{ '{{.ENV}}' }}/node_ips.txt

  setup_ssh_key:
    desc: Extract and save SSH key from terraform output
    cmds:
      - tofu -chdir={{ '{{.TFDIR}}' }} output -raw private_deploy_key > {{ '{{.SSH_KEY}}' }}
      - chmod 600 $SSH_KEY

  ssh_sandbox:
    vars:
      IP:
        sh: head -n1 {{ '{{.ENV}}' }}/node_ips.txt
    requires:
      vars: [ENV]
    cmds:
      - ssh -oStrictHostKeyChecking=no -i {{ '{{.SSH_KEY}}' }} ubuntu@{{ '{{.IP}}' }}

  install_k3s:
    desc: Install k3s on nodes
    vars:
      NODE_IPS:
        sh: cat {{ '{{.ENV}}' }}/generated/node_ips.txt
      FIRST_IP:
        sh: head -n1 {{ '{{.ENV}}' }}/generated/node_ips.txt
      OTHER_IPS:
        sh: tail -n +2 {{ '{{.ENV}}' }}/generated/node_ips.txt
      NODE_COUNT:
        sh: wc -l < {{ '{{.ENV}}' }}/generated/node_ips.txt
      K3S_TOKEN:
        sh: tr -dc A-Za-z0-9 </dev/urandom | head -c 13
    requires:
      vars: [ENV]
    cmds:
      - |
        # Install first node
        CLUSTER_INIT=""
        if [ "{{ '{{.NODE_COUNT}}' }}" -gt 1 ]; then
          CLUSTER_INIT="--cluster-init"
        fi
        ssh -oStrictHostKeyChecking=no -i {{ '{{.SSH_KEY}}' }} \
          ubuntu@{{ '{{.FIRST_IP}}' }} \
          'curl -sfL https://get.k3s.io | K3S_TOKEN={{ '{{.K3S_TOKEN}}' }} \
          INSTALL_K3S_EXEC="server {{ '{{.CLUSTER_INIT}}' }} --tls-san $FIRST_IP \
          --disable=traefik" K3S_KUBECONFIG_MODE="644" sh -s -'
      - |
        # Install other nodes if they exist
        if [ "{{ '{{.NODE_COUNT}}' }}" -gt 1 ]; then
          for ip in $(echo "{{ '{{.OTHER_IPS}}' }}"); do
            echo "Installing $ip..."
            ssh -oStrictHostKeyChecking=no -i {{ '{{.SSH_KEY}}' }} ubuntu@$ip \
              'curl -sfL https://get.k3s.io | K3S_TOKEN={{ '{{.K3S_TOKEN}}' }} \
              INSTALL_K3S_EXEC="server --server https://{{ '{{.FIRST_IP}}' }}:6443 \
              --tls-san {{ '{{.FIRST_IP}}' }} --disable=traefik" \
              K3S_KUBECONFIG_MODE="644" sh -s -'
          done
        fi

  fetch_kubeconfig:
    desc: Fetch and modify kubeconfig from first control plane node
    requires:
      vars: [ENV]
    vars:
      IP:
        sh: head -n1 {{ '{{.ENV}}' }}/node_ips.txt
    cmds:
      - |
        scp -o StrictHostKeyChecking=no -i {{ '{{.SSH_KEY}}' }} ubuntu@{{ '{{.IP}}' }}:/etc/rancher/k3s/k3s.yaml {{ '{{.ENV}}' }}/kubeconfig
      - sed -i'' -e "s/127.0.0.1/{{ '{{.IP}}' }}/g" {{ '{{.ENV}}' }}/kubeconfig
      - sed -i'' -e "s/default/{{ cookiecutter.project_slug }}-{{ '{{.ENV}}' }}/g" {{ '{{.ENV}}' }}/kubeconfig

  enable_ecr_credential_helper:
    desc: |
      Enable the ECR credential helper on all control plane nodes.
    cmds:
      - echo "TODO"

  store_kubeconfig:
    desc: |
      Store the Kubernetes kubeconfig file in AWS Secrets Manager.
    requires:
      vars: [ENV]
    cmds:
      - |
        aws secretsmanager create-secret \
          --name "{{ '{{.ENV}}' }}_kubeconfig" \
          --secret-string "$(base64 -w0 $KUBECONFIG)"

  delete_all_secrets:
    desc: |
      Delete all related secrets from AWS Secrets Manager.
    requires:
      vars: [ENV]
    cmds:
      - |
        aws secretsmanager delete-secret \
          --secret-id "{{ '{{.ENV}}' }}_kubeconfig" \
          --force-delete-without-recovery

  reset_config:
    desc: |
      Remove all config files and delete secrets in AWS Secrets Manager
    requires:
      vars: [ENV]
    cmds:
      - task: delete_all_secrets
      - cd {{ '{{.ENV}}' }} && rm -f kubeconfig

  kubeconfig:
    desc: |
      Retrieve the Kubeconfig for a given cluster

      Since the commands run in sub-shell you can eval the output to export
      KUBECONFIG to your current shell:

        eval $(task k3s:kubeconfig)
    silent: true
    cmds:
      - echo "export KUBECONFIG=$(pwd)/{{ '{{.ENV}}' }}/kubeconfig"

  fetch_config:
    desc: |
      Fetch kubeconfig from AWS Secrets
      Manager.
    requires:
      vars: [ENV]
    cmds:
      - |
        aws secretsmanager get-secret-value \
          --secret-id "{{ '{{.ENV}}' }}_kubeconfig" | \
          yq ".SecretString" | tr -d '"' | \
          base64 -d > ./{{ '{{.ENV}}' }}/kubeconfig
