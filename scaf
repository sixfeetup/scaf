#!/usr/bin/env bash

# set python command
if command -v python &>/dev/null; then
    PYTHON_CMD=python
elif command -v python3 &>/dev/null; then
    PYTHON_CMD=python3
else
    echo "Missing python3 command. Please install python3."
    exit 1;
fi

# Uninstall scaf
if [[ " $* " == *" --uninstall "* ]]; then
  PREFERRED_BIN_FOLDER="${PREFERRED_BIN_FOLDER:-$HOME/.local/bin}"
  DESTINATION="$PREFERRED_BIN_FOLDER/scaf"

  if [[ -e "$DESTINATION" ]]; then
    echo "Uninstalling Scaf..."
    rm -f "$DESTINATION"
    echo "Scaf uninstalled successfully."
  else
    echo "Scaf is not installed."
  fi
  exit 0
fi

# Upgrade scaf
if [[ " $* " == *" --upgrade "* ]]; then
  echo "Upgrading Scaf..."
  curl -sSL https://raw.githubusercontent.com/sixfeetup/scaf/main/install.sh | bash
fi

print_help() {
  cat << EOF
Usage: $0 project_slug [OPTIONS] [TEMPLATE]

Scaf - Project scaffolding CLI tool

Arguments:
  project_slug           The name of your new project (alphanumeric, -, _)

Options:
  --help, -h             Show this help message and exit
  --uninstall            Uninstall Scaf CLI from the system
  --upgrade              Upgrade Scaf to the latest version

Template:
  TEMPLATE               (Optional) Template source. Must be one of the following:
                          - https://github.com/sixfeetup/scaf-fullstack-template.git
                          - https://github.com/sixfeetup/scaf-aws-lambda-app-template.git
                          - Or a local path (e.g. ./my-template)
                          If omitted, you will be prompted to choose.

Advanced Copier Options:
  --defaults             Use default answers to template questions
  --vcs-ref <branch>     Use a specific Git branch/tag/commit from the template repo

Examples:
  $0 my-app
      # Creates a project named "my-app" and prompts to choose a template interactively.

  $0 my-app https://github.com/sixfeetup/scaf-fullstack-template.git
      # Creates "my-app" using the Fullstack template directly from GitHub.

  $0 my-app --defaults --vcs-ref main https://github.com/sixfeetup/scaf-aws-lambda-app-template.git
      # Creates "my-app" using the AWS Lambda template with defaults and from the 'main' branch.

  $0 my-app --defaults --vcs-ref main \$REPO_URL
      # Example with full path to CLI, using defaults and specific VCS reference.
      # REPO_URL must be one of the allowed template URLs above.

EOF
}

# Check for help flag
if [[ " $* " == *" --help "* ]] || [[ " $* " == *" -h "* ]]; then
  print_help
  exit 0
fi

# Ensure at least one argument is provided (for project_slug)
if [ $# -lt 1 ]; then
  echo "Usage: $0 project_slug [OPTIONS] [TEMPLATE]"
  exit 1
fi

# The first argument is always the project slug
PROJECT_SLUG="$1"

# Validate the project slug
if ! [[ $PROJECT_SLUG =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "Error: PROJECT_SLUG should only contain alphanumeric characters, underscores and hyphens."
    exit 1
fi

# Remove the project_slug from the argument list
shift
CLUSTER_SLUG=${PROJECT_SLUG//_/-}
COPIER_SLUG=${PROJECT_SLUG//-/_}

# Assume the last argument is the template URL unless it starts with a dash
REPO_URL=""
if [ $# -gt 0 ]; then
  LAST_ARG="${@: -1}"
  if [[ $LAST_ARG == -* ]]; then
    COPIER_OPTIONS="$@"
  else
    REPO_URL="$LAST_ARG"
    # Remove the last argument (the REPO_URL) from the options
    COPIER_OPTIONS="${@:1:$(($#-1))}"
  fi
else
  COPIER_OPTIONS=""
fi

# If no repo URL was provided, ask for template selection
if [ -z "$REPO_URL" ]; then
  echo "Please choose a template:"
  echo "1) SFU Full Stack Template"
  echo "2) AWS Lambda App Template"
  echo -n "Enter the number corresponding to your choice (1 or 2): "
  read -r template_choice

  case $template_choice in
    1)
      REPO_URL="https://github.com/sixfeetup/scaf-fullstack-template.git"
      ;;
    2)
      REPO_URL="https://github.com/sixfeetup/scaf-aws-lambda-app-template.git"
      ;;
    *)
      echo "Invalid choice. Using default SFU Full Stack Template."
      REPO_URL="https://github.com/sixfeetup/scaf-aws-lambda-app-template.git"
      ;;
  esac
fi


party_popper() {
  for i in {1..4}; do
      echo -ne "\rðŸŽ‰ POP! ðŸ’¥"
      sleep 0.3
      echo -ne "\rðŸ’¥ POP! ðŸŽ‰"
      sleep 0.3
  done
  echo -e "\rðŸŽŠ Congrats! Your $PROJECT_SLUG project is ready! ðŸŽ‰"
  echo
  echo "To get started, run:"
  echo "cd $PROJECT_SLUG"
  echo "tilt up"
  echo
}


echo "COPIER_OPTIONS: $COPIER_OPTIONS"
echo "REPO_URL: $REPO_URL"


echo "Creating your project..."
uv run --with isort,black,copier copier copy $COPIER_OPTIONS $REPO_URL . --trust -d "is_project_slug=$COPIER_SLUG"

# Check if copier was successful
if [ $? -eq 0 ]; then
  kind create cluster --name $CLUSTER_SLUG
  cd $COPIER_SLUG
  make compile
  echo "Dependencies compiled successfully."
  pwd
  echo "Performing initial commit."
  git add .
  git commit -m "Initial commit"
  party_popper
else
  echo "Failed to create project."
  exit 1
fi
